/**
 * @fileOverview Interface for Pusan National University spell checker.
 */
'use strict';

var spell = '';
const async = require('async');

const request = require('request');
const Entities = require('html-entities').AllHtmlEntities;
const entities = new Entities();
const decode = entities.decode;

const split = require('./split-string').byWordCount;

// parses server response
function getJSON(response) {
  var typos = [];

  try {
    response = response.match(/\tdata = \[.*;/g);
    for (var i = 0; i < response.length; ++i) {
      const json = JSON.parse(response[0].substring(8, response[0].length - 1));
      for (var j = 0; j < json.length; ++j) {
        const errInfo = json[j]["errInfo"];
        for (var k = 0; k < errInfo.length; ++k) {
          var suggestions = errInfo[k]["candWord"].replace(/\|$/, '');
          if (suggestions == '') {
            suggestions = decode(errInfo[k]["orgStr"]);
          }
          const info = errInfo[k]["help"].replace(/< *[bB][rR] *\/>/g, "\n");
          const aTypo = {
            token: decode(errInfo[k]["orgStr"]),
            suggestions: decode(suggestions).split('|'),
            info: decode(info)
          };

          typos.push(aTypo);
        }
      }
    }
  } catch (err) {
  }

  return typos;
}

const PUSAN_UNIV_MAX_WORDS  = 280; // passive setting, actually 300
const PUSAN_UNIV_URL        = 'http://speller.cs.pusan.ac.kr/results';

// requests spell check to the server. `check` is called at each response
// with the parsed JSON parameter.
function spellCheck(sentence, timeout, check, end, error) {
  // due to PNU server's weired logic
  const data = split(sentence.replace(/\n/g, "\n "), PUSAN_UNIV_MAX_WORDS);
  var count = data.length;
  
  var getResponse = function (err, response, body) {
	  spell = getJSON(body);
	  end();
  };

  for (var i = 0; i < data.length; ++i) {
    request.post({
      url: PUSAN_UNIV_URL,
      timeout: timeout,
      form: {
        text1: data[i]
      }
    }, getResponse);
  }
}

module.exports = spellCheck;

/* ============================================= 서버 =============================================== */
/*---------- server ----------*/
var http = require('http');
var hostname = '127.0.0.1';
var port = 3003;

var express = require('express');
var app = express();

/*---------- 맞춤법 검사기 ----------*/
var hanspell = require('hanspell');
var end = function() {
	console.log("----맞춤법 교정 완료----");
};
var error = function(err) {
	console.error("맞춤법 검사 오류 : " + err);
};

/*---------- post 요청처리 ----------*/
var querystring = require('querystring');

const cors = require('cors');
app.use(cors()); // CORS 미들웨어 추가
app.use('/script', express.static(__dirname + '/script'));

/*---------- server 구동 함수영역 ----------*/
app.listen(port, function() {
	console.log("Server start..." + port + "번 포트...");
});

app.get('/', function(req, res) {
	console.log('hello world');
});

// 맞춤법 검사
app.post('/spellCheck', function(req, res) {
	console.log('맞춤법 검사기 실행..');
	var postdata = '';
	req.on('data', function(data) {
		postdata += data;
	});
	
	req.on('end', function() {
		// console.log(postdata);
		// var sentence = querystring.parse(postdata);
		var sentence = postdata;
		
		function asyncFunction1() {
			  return new Promise(function (resolve) {
			    setTimeout(function() {
			      hanspell.spellCheckByPNU(sentence, 6000, console.log, end, error);
			      console.log('func1 : ');
			      resolve();
			    }, 1000)
			  })
			}
		
		function asyncFunction2() {
			  return new Promise(function (resolve) {
			    setTimeout(function() {
			      console.log('func2 : ' + JSON.stringify(spell));
			      resolve();
			    }, 4000)
			  })
			}
		
		function asyncFunction3() {
			  return new Promise(function (resolve) {
			    setTimeout(function() {
			      console.log('func3 : ');
			      res.send(spell);
			      //res.send(JSON.stringify(spell));
			      resolve();
			    }, 5000)
			  })
			}
		
		asyncFunction1()
		  .then(function(result) {
		    return asyncFunction2()
		  })
		  .then(function(result) {
		    return asyncFunction3()
		  })
		  .then(function(result) {
			return res.end();
		});
		
	});

});

/* ============================================ 서버 끝 ============================================== */
